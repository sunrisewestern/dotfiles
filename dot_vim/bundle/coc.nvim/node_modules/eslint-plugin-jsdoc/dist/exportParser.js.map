{"version":3,"sources":["../src/exportParser.js"],"names":["debug","createNode","props","getSymbolValue","symbol","type","value","getIdentifier","node","globals","scope","opts","simpleIdentifier","identifierLiteral","name","block","createSymbol","getSymbol","opt","obj","object","propertySymbol","property","computed","propertyValue","body","val","prototype","left","right","method","key","parent","prop","properties","includes","propVal","createBlockSymbol","isGlobal","window","special","id","valueSymbol","initVariables","childNode","expression","declaration","declarations","initWindow","kind","mapVariables","isExport","ancestorsOnly","init","exported","ANONYMOUS_DEFAULT","specifier","specifiers","local","findNode","cache","blockCache","slice","push","propval","Object","values","Array","isArray","some","exportTypes","Set","ignorableNestedTypes","getExportAncestor","nde","idx","ignorableIfDeep","has","canBeExportedByAncestorType","canExportChildrenType","isExportByAncestor","findExportedNode","isNodeExported","moduleExports","module","exports","initModuleExports","esm","parseRecursive","globalVars","parse","ast","isUncommentedExport","sourceCode","settings","exportNode","parseResult"],"mappings":"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","sourcesContent":["import {\n  findJSDocComment,\n} from '@es-joy/jsdoccomment';\nimport debugModule from 'debug';\n\nconst debug = debugModule('requireExportJsdoc');\n\nconst createNode = function () {\n  return {\n    props: {},\n  };\n};\n\nconst getSymbolValue = function (symbol) {\n  /* istanbul ignore next */\n  if (!symbol) {\n    /* istanbul ignore next */\n    return null;\n  }\n\n  /* istanbul ignore next */\n  if (symbol.type === 'literal') {\n    return symbol.value.value;\n  }\n\n  /* istanbul ignore next */\n  return null;\n};\n\nconst getIdentifier = function (node, globals, scope, opts) {\n  if (opts.simpleIdentifier) {\n    // Type is Identier for noncomputed properties\n    const identifierLiteral = createNode();\n    identifierLiteral.type = 'literal';\n    identifierLiteral.value = {\n      value: node.name,\n    };\n\n    return identifierLiteral;\n  }\n\n  /* istanbul ignore next */\n  const block = scope || globals;\n\n  // As scopes are not currently supported, they are not traversed upwards recursively\n  if (block.props[node.name]) {\n    return block.props[node.name];\n  }\n\n  // Seems this will only be entered once scopes added and entered\n  /* istanbul ignore next */\n  if (globals.props[node.name]) {\n    return globals.props[node.name];\n  }\n\n  return null;\n};\n\nlet createSymbol = null;\n\n// eslint-disable-next-line complexity\nconst getSymbol = function (node, globals, scope, opt) {\n  const opts = opt || {};\n  /* istanbul ignore next */\n  // eslint-disable-next-line default-case\n  switch (node.type) {\n  case 'Identifier': {\n    return getIdentifier(node, globals, scope, opts);\n  }\n\n  case 'MemberExpression': {\n    const obj = getSymbol(node.object, globals, scope, opts);\n    const propertySymbol = getSymbol(node.property, globals, scope, {\n      simpleIdentifier: !node.computed,\n    });\n    const propertyValue = getSymbolValue(propertySymbol);\n\n    /* istanbul ignore next */\n    if (obj && propertyValue && obj.props[propertyValue]) {\n      const block = obj.props[propertyValue];\n\n      return block;\n    }\n\n    /*\n    if (opts.createMissingProps && propertyValue) {\n      obj.props[propertyValue] = createNode();\n\n      return obj.props[propertyValue];\n    }\n    */\n    /* istanbul ignore next */\n    debug(`MemberExpression: Missing property ${node.property.name}`);\n\n    /* istanbul ignore next */\n    return null;\n  }\n\n  case 'ClassExpression': {\n    return getSymbol(node.body, globals, scope, opts);\n  }\n\n  case 'TSTypeAliasDeclaration':\n  case 'TSEnumDeclaration': case 'TSInterfaceDeclaration':\n  case 'ClassDeclaration':\n  case 'FunctionExpression': case 'FunctionDeclaration':\n  case 'ArrowFunctionExpression': {\n    const val = createNode();\n    val.props.prototype = createNode();\n    val.props.prototype.type = 'object';\n    val.type = 'object';\n    val.value = node;\n\n    return val;\n  }\n\n  case 'AssignmentExpression': {\n    return createSymbol(node.left, globals, node.right, scope, opts);\n  }\n\n  case 'ClassBody': {\n    const val = createNode();\n    for (const method of node.body) {\n      val.props[method.key.name] = createNode();\n      val.props[method.key.name].type = 'object';\n      val.props[method.key.name].value = method.value;\n    }\n\n    val.type = 'object';\n    val.value = node.parent;\n\n    return val;\n  }\n\n  case 'ObjectExpression': {\n    const val = createNode();\n    val.type = 'object';\n    for (const prop of node.properties) {\n      if ([\n        // @typescript-eslint/parser, espree, acorn, etc.\n        'SpreadElement',\n\n        // @babel/eslint-parser\n        'ExperimentalSpreadProperty',\n      ].includes(prop.type)) {\n        continue;\n      }\n\n      const propVal = getSymbol(prop.value, globals, scope, opts);\n      /* istanbul ignore next */\n      if (propVal) {\n        val.props[prop.key.name] = propVal;\n      }\n    }\n\n    return val;\n  }\n\n  case 'Literal': {\n    const val = createNode();\n    val.type = 'literal';\n    val.value = node;\n\n    return val;\n  }\n  }\n\n  /* istanbul ignore next */\n  return null;\n};\n\nconst createBlockSymbol = function (block, name, value, globals, isGlobal) {\n  block.props[name] = value;\n  if (isGlobal && globals.props.window && globals.props.window.special) {\n    globals.props.window.props[name] = value;\n  }\n};\n\ncreateSymbol = function (node, globals, value, scope, isGlobal) {\n  const block = scope || globals;\n  let symbol;\n  // eslint-disable-next-line default-case\n  switch (node.type) {\n  case 'FunctionDeclaration':\n  /* istanbul ignore next */\n  // Fall through\n  case 'TSEnumDeclaration': case 'TSInterfaceDeclaration':\n  /* istanbul ignore next */\n  // Fall through\n  case 'TSTypeAliasDeclaration': case 'ClassDeclaration': {\n    /* istanbul ignore next */\n    if (node.id && node.id.type === 'Identifier') {\n      return createSymbol(node.id, globals, node, globals);\n    }\n\n    /* istanbul ignore next */\n    break;\n  }\n\n  case 'Identifier': {\n    if (value) {\n      const valueSymbol = getSymbol(value, globals, block);\n      /* istanbul ignore next */\n      if (valueSymbol) {\n        createBlockSymbol(block, node.name, valueSymbol, globals, isGlobal);\n\n        return block.props[node.name];\n      }\n\n      /* istanbul ignore next */\n      debug('Identifier: Missing value symbol for %s', node.name);\n    } else {\n      createBlockSymbol(block, node.name, createNode(), globals, isGlobal);\n\n      return block.props[node.name];\n    }\n\n    /* istanbul ignore next */\n    break;\n  }\n\n  case 'MemberExpression': {\n    symbol = getSymbol(node.object, globals, block);\n\n    const propertySymbol = getSymbol(node.property, globals, block, {\n      simpleIdentifier: !node.computed,\n    });\n    const propertyValue = getSymbolValue(propertySymbol);\n    if (symbol && propertyValue) {\n      createBlockSymbol(symbol, propertyValue, getSymbol(value, globals, block), globals, isGlobal);\n\n      return symbol.props[propertyValue];\n    }\n\n    /* istanbul ignore next */\n    debug('MemberExpression: Missing symbol: %s', node.property.name);\n    break;\n  }\n  }\n\n  return null;\n};\n\n// Creates variables from variable definitions\nconst initVariables = function (node, globals, opts) {\n  // eslint-disable-next-line default-case\n  switch (node.type) {\n  case 'Program': {\n    for (const childNode of node.body) {\n      initVariables(childNode, globals, opts);\n    }\n\n    break;\n  }\n\n  case 'ExpressionStatement': {\n    initVariables(node.expression, globals, opts);\n    break;\n  }\n\n  case 'VariableDeclaration': {\n    for (const declaration of node.declarations) {\n      // let and const\n      const symbol = createSymbol(declaration.id, globals, null, globals);\n      if (opts.initWindow && node.kind === 'var' && globals.props.window) {\n        // If var, also add to window\n        globals.props.window.props[declaration.id.name] = symbol;\n      }\n    }\n\n    break;\n  }\n\n  case 'ExportNamedDeclaration': {\n    if (node.declaration) {\n      initVariables(node.declaration, globals, opts);\n    }\n\n    break;\n  }\n  }\n};\n\n// Populates variable maps using AST\n// eslint-disable-next-line complexity\nconst mapVariables = function (node, globals, opt, isExport) {\n  /* istanbul ignore next */\n  const opts = opt || {};\n  /* istanbul ignore next */\n  switch (node.type) {\n  case 'Program': {\n    if (opts.ancestorsOnly) {\n      return false;\n    }\n\n    for (const childNode of node.body) {\n      mapVariables(childNode, globals, opts);\n    }\n\n    break;\n  }\n\n  case 'ExpressionStatement': {\n    mapVariables(node.expression, globals, opts);\n    break;\n  }\n\n  case 'AssignmentExpression': {\n    createSymbol(node.left, globals, node.right);\n    break;\n  }\n\n  case 'VariableDeclaration': {\n    for (const declaration of node.declarations) {\n      const isGlobal = opts.initWindow && node.kind === 'var' && globals.props.window;\n      const symbol = createSymbol(declaration.id, globals, declaration.init, globals, isGlobal);\n      if (symbol && isExport) {\n        symbol.exported = true;\n      }\n    }\n\n    break;\n  }\n\n  case 'FunctionDeclaration': {\n    /* istanbul ignore next */\n    if (node.id.type === 'Identifier') {\n      createSymbol(node.id, globals, node, globals, true);\n    }\n\n    break;\n  }\n\n  case 'ExportDefaultDeclaration': {\n    const symbol = createSymbol(node.declaration, globals, node.declaration);\n    if (symbol) {\n      symbol.exported = true;\n    } else if (!node.id) {\n      globals.ANONYMOUS_DEFAULT = node.declaration;\n    }\n\n    break;\n  }\n\n  case 'ExportNamedDeclaration': {\n    if (node.declaration) {\n      if (node.declaration.type === 'VariableDeclaration') {\n        mapVariables(node.declaration, globals, opts, true);\n      } else {\n        const symbol = createSymbol(node.declaration, globals, node.declaration);\n        /* istanbul ignore next */\n        if (symbol) {\n          symbol.exported = true;\n        }\n      }\n    }\n\n    for (const specifier of node.specifiers) {\n      mapVariables(specifier, globals, opts);\n    }\n\n    break;\n  }\n\n  case 'ExportSpecifier': {\n    const symbol = getSymbol(node.local, globals, globals);\n    /* istanbul ignore next */\n    if (symbol) {\n      symbol.exported = true;\n    }\n\n    break;\n  }\n\n  case 'ClassDeclaration': {\n    createSymbol(node.id, globals, node.body, globals);\n    break;\n  }\n\n  default: {\n    /* istanbul ignore next */\n    return false;\n  }\n  }\n\n  return true;\n};\n\nconst findNode = function (node, block, cache) {\n  let blockCache = cache || [];\n  /* istanbul ignore next */\n  if (!block || blockCache.includes(block)) {\n    return false;\n  }\n\n  blockCache = blockCache.slice();\n  blockCache.push(block);\n\n  if (\n    (block.type === 'object' || block.type === 'MethodDefinition') &&\n    block.value === node\n  ) {\n    return true;\n  }\n\n  const {\n    props = block.body,\n  } = block;\n  for (const propval of Object.values(props || {})) {\n    if (Array.isArray(propval)) {\n      /* istanbul ignore if */\n      if (propval.some((val) => {\n        return findNode(node, val, blockCache);\n      })) {\n        return true;\n      }\n    } else if (findNode(node, propval, blockCache)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst exportTypes = new Set([\n  'ExportNamedDeclaration', 'ExportDefaultDeclaration',\n]);\nconst ignorableNestedTypes = new Set([\n  'FunctionDeclaration', 'ArrowFunctionExpression', 'FunctionExpression',\n]);\nconst getExportAncestor = function (nde) {\n  let node = nde;\n  let idx = 0;\n  const ignorableIfDeep = ignorableNestedTypes.has(nde?.type);\n  while (node) {\n    // Ignore functions nested more deeply than say `export default function () {}`\n    if (idx >= 2 && ignorableIfDeep) {\n      break;\n    }\n\n    if (exportTypes.has(node.type)) {\n      return node;\n    }\n\n    node = node.parent;\n    idx++;\n  }\n\n  return false;\n};\n\nconst canBeExportedByAncestorType = new Set([\n  'TSPropertySignature',\n  'TSMethodSignature',\n  'ClassProperty',\n  'PropertyDefinition',\n  'Method',\n]);\n\nconst canExportChildrenType = new Set([\n  'TSInterfaceBody',\n  'TSInterfaceDeclaration',\n  'TSTypeLiteral',\n  'TSTypeAliasDeclaration',\n  'ClassDeclaration',\n  'ClassBody',\n  'ClassDefinition',\n  'ClassExpression',\n  'Program',\n]);\n\nconst isExportByAncestor = function (nde) {\n  if (!canBeExportedByAncestorType.has(nde.type)) {\n    return false;\n  }\n\n  let node = nde.parent;\n  while (node) {\n    if (exportTypes.has(node.type)) {\n      return node;\n    }\n\n    if (!canExportChildrenType.has(node.type)) {\n      return false;\n    }\n\n    node = node.parent;\n  }\n\n  return false;\n};\n\nconst findExportedNode = function (block, node, cache) {\n  /* istanbul ignore next */\n  if (block === null) {\n    return false;\n  }\n\n  const blockCache = cache || [];\n  const {\n    props,\n  } = block;\n  for (const propval of Object.values(props)) {\n    blockCache.push(propval);\n    if (propval.exported && (node === propval.value || findNode(node, propval.value))) {\n      return true;\n    }\n\n    // No need to check `propval` for exported nodes as ESM\n    //  exports are only global\n  }\n\n  return false;\n};\n\nconst isNodeExported = function (node, globals, opt) {\n  const moduleExports = globals.props.module?.props?.exports;\n  if (\n    opt.initModuleExports && moduleExports && findNode(node, moduleExports)\n  ) {\n    return true;\n  }\n\n  if (opt.initWindow && globals.props.window && findNode(node, globals.props.window)) {\n    return true;\n  }\n\n  if (opt.esm && findExportedNode(globals, node)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst parseRecursive = function (node, globalVars, opts) {\n  // Iterate from top using recursion - stop at first processed node from top\n  if (node.parent && parseRecursive(node.parent, globalVars, opts)) {\n    return true;\n  }\n\n  return mapVariables(node, globalVars, opts);\n};\n\nconst parse = function (ast, node, opt) {\n  /* istanbul ignore next */\n  const opts = opt || {\n    ancestorsOnly: false,\n    esm: true,\n    initModuleExports: true,\n    initWindow: true,\n  };\n\n  const globalVars = createNode();\n  if (opts.initModuleExports) {\n    globalVars.props.module = createNode();\n    globalVars.props.module.props.exports = createNode();\n    globalVars.props.exports = globalVars.props.module.props.exports;\n  }\n\n  if (opts.initWindow) {\n    globalVars.props.window = createNode();\n    globalVars.props.window.special = true;\n  }\n\n  if (opts.ancestorsOnly) {\n    parseRecursive(node, globalVars, opts);\n  } else {\n    initVariables(ast, globalVars, opts);\n    mapVariables(ast, globalVars, opts);\n  }\n\n  return {\n    globalVars,\n  };\n};\n\nconst isUncommentedExport = function (node, sourceCode, opt, settings) {\n  // console.log({node});\n  // Optimize with ancestor check for esm\n  if (opt.esm) {\n    const exportNode = getExportAncestor(node);\n\n    // Is export node comment\n    if (exportNode && !findJSDocComment(exportNode, sourceCode, settings)) {\n      return true;\n    }\n\n    /**\n     * Some typescript types are not in variable map, but inherit exported (interface property and method)\n     */\n    if (\n      isExportByAncestor(node) &&\n      !findJSDocComment(node, sourceCode, settings)\n    ) {\n      return true;\n    }\n  }\n\n  const parseResult = parse(sourceCode.ast, node, opt);\n\n  return isNodeExported(node, parseResult.globalVars, opt);\n};\n\nexport default {\n  isUncommentedExport,\n  parse,\n};\n"],"file":"exportParser.js"}